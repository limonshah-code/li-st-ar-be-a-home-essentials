name: Generate Articles

on:
  schedule:
    # Run every 4 hours - more reliable than every 2 hours
    - cron: '0 */2 * * *'
  workflow_dispatch:  # Allow manual triggering
  push:  # Add this to prevent repository from becoming inactive
    branches: [ main ]
    paths:
      - '.github/workflows/**'  # Only trigger on workflow changes

# Add permissions for token access
permissions:
  contents: write
  actions: read

jobs:
  generate-articles:
    runs-on: ubuntu-latest
    
    # Add timeout to prevent hanging jobs
    timeout-minutes: 60
    
    env:
      # Original API key (for backward compatibility)
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      # Multiple Gemini API keys for rotation
      GEMINI_API_KEY_1: ${{ secrets.GEMINI_API_KEY_1 }}
      GEMINI_API_KEY_2: ${{ secrets.GEMINI_API_KEY_2 }}
      GEMINI_API_KEY_3: ${{ secrets.GEMINI_API_KEY_3 }}
      GEMINI_API_KEY_4: ${{ secrets.GEMINI_API_KEY_4 }}
      GEMINI_API_KEY_5: ${{ secrets.GEMINI_API_KEY_5 }}
      GEMINI_API_KEY_6: ${{ secrets.GEMINI_API_KEY_6 }}
      # Cloudinary settings
      CLOUDINARY_URL: ${{ secrets.CLOUDINARY_URL }}
      CLOUDINARY_CLOUD_NAME: ${{ secrets.CLOUDINARY_CLOUD_NAME }}
      CLOUDINARY_API_KEY: ${{ secrets.CLOUDINARY_API_KEY }}
      CLOUDINARY_API_SECRET: ${{ secrets.CLOUDINARY_API_SECRET }}
      # Email settings
      EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4  # Updated to v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch full history
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'  # Updated to 3.11 for better performance
          cache: 'pip'  # Cache pip dependencies
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-genai pillow requests markdown pyyaml numpy scikit-learn nltk
          
      - name: Create required directories
        run: |
          mkdir -p generated-articles
          mkdir -p data
          
      - name: Check for required files
        run: |
          # Create empty files if they don't exist
          touch data/keywords.txt
          touch data/processed_keywords.txt
          touch data/keywords-generated.txt
          touch data/links.txt
          
      - name: Run article generation script
        id: generate
        continue-on-error: true  # Don't fail the entire workflow if script fails
        run: |
          echo "Starting article generation..."
          python .github/scripts/generate_articles.py
          echo "Article generation completed"
          
      - name: Check for changes
        id: verify-changed-files
        run: |
          if git diff --quiet && git diff --staged --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "No changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "Changes detected"
          fi
          
      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git config --local user.name 'github-actions[bot]'
          git config --local user.email 'github-actions[bot]@users.noreply.github.com'
          
          # Add all generated files
          git add generated-articles/ || true
          git add data/ || true
          git add .last_keyword_index || true
          
          # Create commit with timestamp
          git commit -m "Auto-generate articles $(date -u '+%Y-%m-%d %H:%M:%S UTC') [skip ci]" || exit 0
          
          # Push with retry logic
          for i in 1 2 3; do
            if git push; then
              echo "Successfully pushed changes"
              break
            else
              echo "Push attempt $i failed, retrying..."
              sleep 5
            fi
          done
          
      - name: Create workflow summary
        if: always()
        run: |
          echo "## Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow**: ${{ github.workflow }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "generated-articles" ]; then
            echo "- **Articles Generated**: $(ls generated-articles/*.md 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Article generation workflow failed"
          echo "Check the logs above for detailed error information"